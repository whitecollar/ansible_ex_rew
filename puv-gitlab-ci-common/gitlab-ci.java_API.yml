stages:
  - build-project

# Собираем кэш мавена
.maven:
  image: $MAVEN_IMAGE
  tags:
    - projects_puv
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/.m2/repository

# Собираем проект
.build-project-tag:
  extends: .maven
  stage: build-project
  before_script:
    # Задаём переменные
    - export DATE_RELEASE=`date +%d%m%y`
    - apt-get update -y
    - apt-get install git -y
    # Подключаемся к текущему репозиторию гитлаба 
    - git remote set-url origin https://$GIT_USER:$GIT_PASS@$PROJECT_URL
    # Задаём e-mail пользователя для дальнейших изменений
    - git config --global user.email "$GIT_EMAIL_USER"
    # Задаём имя пользователя для дальнейших изменений
    - git config --global user.name "$GIT_USER"
    - git clone https://$GIT_USER:$GIT_PASS@dpr-gitlab.otr.ru/admins/puv-gitlab-ci-common.git
    - cp -f $NEXUS_CRED_FILE ~/.m2/settings.xml
  script:
    # Забираем последний тег, если он существует, если нет, приравниваем значение к 0
    - if git describe --tags --abbrev=0 > /dev/null; then LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1)); else LAST_TAG=0.0.0; fi
    # Выделяем номер последней сборки из тега и инкриментим
    - BUILD_NUMBER=$(echo $LAST_TAG |  awk -F'.' '{print $3+1}')
    # Забираем текуший номер версии из pom ( в формате <major>.<minor>)
    - version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
    - pref=$(echo $version |  awk -F'.' '{print $1"."$2}')
    # Формируем новую версию в формате <major>.<minor>.<номер сборки> TODO: добавить суффикс (dev, RC или "") в зависимости от ветки
    - NEWVERSION=$(echo $pref"."$BUILD_NUMBER)
    # обновляем номер версии в pom
    - mvn -U versions:set -DnewVersion=${NEWVERSION}${SUFF}
    # Собираем артефакт и деплоим в нексус
    - mvn clean deploy
    # Возвращаем старую версию в pom
    - mvn -U versions:set -DnewVersion=${version}
    # Создаем тэг
    - git tag -a $NEWVERSION.$DATE_RELEASE.$CI_PROJECT_NAME -m "version ${NEWVERSION}.${DATE_RELEASE}.${CI_PROJECT_NAME}"
    # Пушим тэг в текущую ветку  
    - git push origin $NEWVERSION.$DATE_RELEASE.$CI_PROJECT_NAME

# .build-project:
#   extends: .maven
#   stage: build-project
#   script:
#     - mvn clean deploy


# build-project-branch:
#   extends: .build-project
#   only:
#     - merge_requests
#   except:
#     - "develop"
#     -  "master"
#     - "/^release/"
#     - "tags"

# build-project-dev:
#   extends: .build-project
#   only:
#     - "develop"

# build-project-release:
#   extends: .build-project-tag
#   only:
#     - "/^release/"
#   variables:
#     SUFF: "-rc"


build-project-master:
  extends: .build-project-tag
  only:
    - "master"
  variables:
    SUFF: ""
